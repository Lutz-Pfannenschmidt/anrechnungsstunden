---
import DefaultLayout from "@src/layouts/DefaultLayout.astro";
---

<DefaultLayout title="Punkteverwaltung">
    <h1 class="text-4xl text-center font-bold">Punkteverwaltung</h1>

    <p class="text-alert text-center">
        Achtung! Bitte auf Rechtschreibung achten!
    </p>

    <div class="flex justify-center">
        <button id="new_button" class="btn btn-success btn-wide m-8"
            >Neuer Eintrag</button
        >
        <a href="/admin/points/import" class="btn btn-success btn-wide m-8"
            >Excel import</a
        >
    </div>

    <table id="points" class="table table-zebra">
        <thead>
            <tr>
                <th>Unterricht</th>
                <th>Stufe</th>
                <th>Punkte pro Klausur</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <dialog id="new_popover" class="modal w-screen min-h-screen">
        <div class="modal-box min-w-1/2 flex flex-col gap-4">
            <h2 class="text-2xl font-bold text-center">Neuer Eintrag</h2>
            <p class="text-warning text-center">
                Achtung! Bitte auf Rechtschreibung achten!
            </p>
            <p class="text-center">
                Zum Abbrechen auf den Hintergrund klicken oder ESC drücken.
            </p>

            <form id="new_form" class="flex flex-col gap-6">
                <label class="floating-label">
                    <input
                        id="subject"
                        name="subject"
                        required
                        type="text"
                        placeholder="Unterricht (D, M, E, ...)"
                        class="input validator w-full"
                    />
                    <span>Unterricht</span>
                </label>

                <label class="floating-label">
                    <input
                        id="grade"
                        name="grade"
                        required
                        type="text"
                        placeholder="Stufe (5, 6, 7, ..., EF, Q1, Q2)"
                        class="input validator w-full"
                    />
                    <span>Stufe</span>
                </label>

                <label class="floating-label">
                    <input
                        id="points"
                        name="points"
                        required
                        type="text"
                        placeholder="Punkte pro Klausur pro Schüler:in"
                        class="input validator w-full"
                    />
                    <span>Punkte pro Klausur</span>
                </label>

                <div class="modal-action flex-col md:flex-row gap-4">
                    <button class="btn btn-lg btn-success w-full md:w-auto"
                        >Speichern</button
                    >
                </div>
            </form>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>
</DefaultLayout>

<script>
    import { pb, putPartPoints } from "@src/pocketbase";
    import { Collections } from "@src/pocketbase-types";
    import { toast } from "@src/toast";

    let points = await pb.collection(Collections.PartPoints).getFullList();

    const table = document.getElementById("points") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;
    const new_button = document.getElementById(
        "new_button"
    ) as HTMLButtonElement;
    const new_popover = document.getElementById(
        "new_popover"
    ) as HTMLDialogElement;
    const new_form = document.getElementById("new_form") as HTMLFormElement;

    pb.collection(Collections.PartPoints).subscribe("*", async function () {
        points = await pb.collection(Collections.PartPoints).getFullList();
        fillTable();
    });

    function fillTable() {
        tbody.innerHTML = "";
        for (const point of points) {
            const tr = document.createElement("tr");

            const subject = document.createElement("td");
            subject.textContent = point.class;
            tr.appendChild(subject);

            const grade = document.createElement("td");
            grade.textContent = point.grade;
            tr.appendChild(grade);

            const points = document.createElement("td");
            points.textContent = point.points.toString();
            tr.appendChild(points);

            const actions = document.createElement("td");
            const delete_button = document.createElement("a");
            delete_button.textContent = "Löschen";
            delete_button.href = "#";
            delete_button.classList.add("btn", "btn-error", "btn-sm", "mr-2");
            delete_button.addEventListener("click", async function (e: Event) {
                e.preventDefault();
                try {
                    await pb
                        .collection(Collections.PartPoints)
                        .delete(point.id);
                } catch (e) {
                    console.log(e);
                }
            });
            const edit_button = document.createElement("a");
            edit_button.textContent = "Bearbeiten";
            edit_button.href = "#";
            edit_button.classList.add("btn", "btn-primary", "btn-sm", "mr-2");
            edit_button.addEventListener("click", async function (e: Event) {
                e.preventDefault();
                new_form.setAttribute("data-id", point.id);
                new_form.subject.value = point.class;
                new_form.grade.value = point.grade;
                new_form.points.value = point.points;
                new_popover.showModal();
            });
            actions.appendChild(edit_button);
            actions.appendChild(delete_button);
            tr.appendChild(actions);

            tbody.appendChild(tr);
        }
    }

    new_form.addEventListener("submit", async function (e) {
        e.preventDefault();

        const row_id = new_form.getAttribute("data-id");

        const subject = new_form.subject.value.trim();
        const grade = new_form.grade.value.trim();
        const points = (new_form.points.value as string)
            .trim()
            .replaceAll(",", ".");

        const record = await putPartPoints(subject, grade, points, row_id);
        if (record === null) {
            toast("error", "Eintrag konnte nicht gespeichert werden.");
            return;
        }

        new_popover.close();
    });

    function openPopover() {
        new_form.reset();
        new_popover.showModal();
    }

    function onModalClose() {
        new_form.removeAttribute("data-id");
        new_form.reset();
    }

    new_button.addEventListener("click", openPopover);
    new_popover.addEventListener("close", onModalClose);

    fillTable();
</script>
