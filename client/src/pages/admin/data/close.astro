---
import DefaultLayout from "@src/layouts/DefaultLayout.astro";
---

<DefaultLayout title="Halbjahresverwaltung">
    <h1 class="text-4xl font-bold text-center">
        Halbjahresabschluss abschließen
    </h1>

    <table id="users" class="table table-zebra">
        <thead>
            <tr>
                <th>Lehrer:in</th>
                <th class="grow">Durchsch. Stunden pro Woche</th>
                <th class="grow">Klassenleitung in %</th>
                <th class="grow">Zusatzpunkte (z.B. für Mündl. Prüfungen)</th>
                <th>Aus diesem Abschluss entfernen</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <div class="flex justify-center">
        <button id="submit" class="btn btn-wide btn-warning">Abschließen</button
        >
    </div>
</DefaultLayout>

<script>
    import {
        Collections,
        type TeacherDataResponse,
        type UsersResponse,
        type YearsRecord,
        YearsStateOptions,
    } from "@src/pocketbase-types";
    import { pb } from "@src/pocketbase";
    import { customAlert, customPrompt, toast } from "@src/toast";
    const table = document.getElementById("users") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;
    const submit = document.getElementById("submit") as HTMLButtonElement;

    const urlParams = new URLSearchParams(window.location.search);
    const yID = urlParams.get("id") || "";
    let year: YearsRecord;
    try {
        year = await pb.collection(Collections.Years).getOne(yID);
    } catch {
        window.location.href = "/admin/data/";
        year = {} as YearsRecord;
    }

    if (!year || year.state !== YearsStateOptions.open) {
        window.location.href = "/admin/data/";
    }

    type Expand = {
        user: UsersResponse;
    };
    let teacher_data: TeacherDataResponse<Expand>[];
    try {
        teacher_data = await pb
            .collection(Collections.TeacherData)
            .getFullList<
                TeacherDataResponse<Expand>
            >({ filter: `semester="${yID}"`, expand: "user" });
    } catch {
        window.location.href = "/admin/data/";
        teacher_data = [];
    }

    teacher_data.forEach((td_row) => {
        const row = document.createElement("tr");

        const className = td_row.expand.user.name.includes("_NAME_COLLISION_")
            ? "text-warning"
            : "";

        row.innerHTML = `
            <td class="${className}" >${td_row.expand.user.name.split("_NAME_COLLISION_")[0]} (${td_row.expand.user.short.toUpperCase()})</td>
            <td class="grow">${td_row.avg_time.toFixed(3)}</td>
            <td class="grow"><input type="number" data-name="class_lead" class="input input-sm" value="${td_row.class_lead.toFixed(3)}" /></td>
            <td class="grow"><input type="number" data-name="add_points" class="input input-sm" value="${td_row.add_points.toFixed(3)}" /></td>
            <td>
                <button data-rem-id="${td_row.id}" class="btn btn-sm btn-error">Entfernen</button>
            </td>
        `;

        row.querySelectorAll("[data-rem-id]").forEach((btn) => {
            btn.addEventListener("click", async () => {
                const id = btn.getAttribute("data-rem-id");
                if (id) {
                    await pb.collection(Collections.TeacherData).delete(id);
                    row.remove();
                }
            });
        });

        tbody.appendChild(row);
    });

    submit.addEventListener("click", async (e: Event) => {
        e.preventDefault();

        const class_leads = Array.from(
            document.querySelectorAll(
                "input[data-name='class_lead']"
            ) as NodeListOf<HTMLInputElement>
        ).map((el) => parseFloat(el.value));

        const add_points = Array.from(
            document.querySelectorAll(
                "input[data-name='add_points']"
            ) as NodeListOf<HTMLInputElement>
        ).map((el) => parseFloat(el.value));

        if (
            class_leads.length !== teacher_data.length ||
            add_points.length !== teacher_data.length
        ) {
            customAlert(
                "Bitte geben Sie für alle Lehrer:innen eine Klassenleitung und Zusatzpunkte an."
            );
            return;
        }

        const batch = pb.createBatch();
        for (let i = 0; i < teacher_data.length; i++) {
            const td = teacher_data[i];
            td.class_lead = class_leads[i];
            td.add_points = add_points[i];
            batch.collection(Collections.TeacherData).upsert(td);
        }

        try {
            await batch.send();
        } catch (e) {
            customAlert("Fehler beim Aktualisieren der Daten: " + e);
            return;
        }

        try {
            year.state = YearsStateOptions.closed;

            const mul = await customPrompt(
                "Faktor für die Berechnung der Stunden pro Woche (z.B. 7,84)",
                "number",
                "7,84"
            );
            const mulFloat = parseFloat(mul || "");
            if (!mul || isNaN(mulFloat)) {
                customAlert("Abschluss abgebrochen.");
                return;
            }
            year.base_mul = mulFloat;

            const lead = await customPrompt(
                "Punkte pro 100% Klassenleitung (z.B. 120)",
                "number",
                "120"
            );
            const leadFloat = parseFloat(lead || "");
            if (!lead || isNaN(leadFloat)) {
                customAlert("Abschluss abgebrochen.");
                return;
            }
            year.lead_points = leadFloat;

            const total = await customPrompt(
                "Gesamtanrechnungsstunden (z.B. 26)",
                "number",
                "26"
            );
            const totalFloat = parseFloat(total || "");
            if (!total || isNaN(totalFloat)) {
                customAlert("Abschluss abgebrochen.");
                return;
            }
            year.total_points = totalFloat;

            submit.disabled = true;
            toast(
                "info",
                "PDFs werden (im Hintergrund) erstellt.",
                "Sie können diese Seite verlassen. Wenn sie diese Seite verlassen, werden KEINE Fehler angezeigt, wenn es Probleme gibt."
            );
            await pb.collection(Collections.Years).update(year.id, year);
            await customAlert(
                "Halbjahresabschluss erfolgreich abgeschlossen. PDFs wurden erstellt."
            );
            window.location.href = "/admin/data/";
        } catch (e) {
            await customAlert("Fehler beim Abschließen des Jahres: " + e);
            return;
        }
    });
</script>
