---
import DefaultLayout from "@src/layouts/DefaultLayout.astro";
---

<DefaultLayout title="Halbjahresverwaltung">
    <h1 class="text-4xl font-bold text-center">Halbjahresverwaltung</h1>

    <div class="flex justify-center flex-end gap-4">
        <a href="/admin/data/new" class="w-md btn btn-warning text-center my-2"
            >Neuen Halbjahresabschluss starten (Alte Ansicht)</a
        >
        <a
            href="/admin/data/advanced"
            class="w-md btn btn-success text-center my-2"
            >Neuen Halbjahresabschluss starten</a
        >
    </div>

    <div class="overflow-x-auto">
        <table id="years_table" class="table table-zebra">
            <!-- head -->
            <thead>
                <tr>
                    <th></th>
                    <th>Schuljahr</th>
                    <th>Halbjahr</th>
                    <th>Status</th>
                    <th>Bearbeitet</th>
                    <th>Aktionen</th>
                </tr>
            </thead>
            <tbody> </tbody>
        </table>
    </div>
</DefaultLayout>

<script>
    import { pb } from "@src/pocketbase";
    import { Collections } from "@src/pocketbase-types";
    import { toast } from "@src/toast";
    import Swal from "sweetalert2";

    const years = await pb.collection(Collections.Years).getFullList();

    const table = document.getElementById("years_table") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;

    main();
    async function main() {
        tbody.innerHTML = "";
        for (let i = 0; i < years.length; i++) {
            const year = years[i];
            const tr = document.createElement("tr");

            const yearStr = `${year.start_year}/${(year.start_year + 1).toString().substring(2)}`;
            const semesterStr =
                year.semester === 1 ? "1. Halbjahr" : "2. Halbjahr";
            const changeDate = new Date(year.updated);
            const changeStr = changeDate.toLocaleString("de-DE");

            const splitDate = new Date(year.split);
            const splitStr = splitDate.toLocaleString("de-DE", {
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
            });

            let link = "/404";
            let text = "Fehler";
            let btnText = "Fehler";
            switch (year.state) {
                case "uploaded":
                    link = `/admin/data/new2/?year=${year.start_year}&semester=${year.semester}&split_date=${splitStr}`;
                    text = "Daten wurden hochgeladen";
                    btnText = "Lehrpersonen auswählen";
                    break;
                case "open":
                    link = `/admin/data/close/?year=${year.start_year}&semester=${year.semester}`;
                    text = "Offen für Einsendungen";
                    btnText = "Einsendungen einsehen";
                    break;
                case "closed":
                    link = `/admin/data/closed/?year=${year.start_year}&semester=${year.semester}`;
                    text = "Einsendungen geschlossen";
                    btnText = "Ergebnisse anzeigen";
                    break;
            }

            const dynamicBtn = document.createElement("a");
            dynamicBtn.href = link;
            dynamicBtn.classList.add("btn", "btn-primary", "btn-sm", "mr-2");
            dynamicBtn.textContent = btnText;

            const delBtn = document.createElement("a");
            delBtn.href = "#";
            delBtn.classList.add("btn", "btn-error", "btn-sm", "mr-2");
            delBtn.textContent = "Löschen";
            const onDel = async () => {
                const res = await Swal.fire({
                    title: "Wirklich löschen?",
                    showCancelButton: true,
                    confirmButtonColor: "var(--color-error)",
                    cancelButtonColor: "var(--color-success)",
                    confirmButtonText: "Ja",
                    cancelButtonText: "Nein",
                });

                if (res.isConfirmed) {
                    await pb.collection("years").delete(year.id);
                    tr.remove();
                }
            };
            delBtn.onclick = onDel;

            const uncompleteBtn = document.createElement("a");
            uncompleteBtn.href = "#";
            uncompleteBtn.classList.add("btn", "btn-warning", "btn-sm", "mr-2");
            uncompleteBtn.textContent = "Wieder öffnen";
            const onUncomplete = async () => {
                const res = await Swal.fire({
                    title: "Wollen Sie den Halbjahresabschluss wirklich wieder öffnen?",
                    showCancelButton: true,
                    confirmButtonColor: "var(--color-error)",
                    cancelButtonColor: "var(--color-success)",
                    confirmButtonText: "Ja, wieder öffnen",
                    cancelButtonText: "Nein",
                });

                if (res.isConfirmed) {
                    toast("info", "Wird geöffnet...");

                    try {
                        const record = await pb
                            .collection(Collections.Results)
                            .getFirstListItem(
                                pb.filter("semester={:semester}", {
                                    semester: year.id,
                                }),
                            );
                        await pb
                            .collection(Collections.Results)
                            .delete(record.id);
                    } catch (e) {
                        toast("error", "Fehler beim Öffnen");
                    }
                    toast("success", "Wieder geöffnet");
                    window.location.reload();
                    main();
                }
            };
            uncompleteBtn.onclick = onUncomplete;

            tr.innerHTML = `
                <td>${i + 1}</td>
                <td>${yearStr}</td>
                <td>${semesterStr}</td>
                <td>${text}</td>
                <td>${changeStr}</td>
                <td class="actions"></td>
            `;

            tr.lastElementChild?.appendChild(dynamicBtn);
            tr.lastElementChild?.appendChild(delBtn);
            if (year.state === "closed") {
                tr.lastElementChild?.appendChild(uncompleteBtn);
            }

            tbody.appendChild(tr);
        }
    }
</script>
