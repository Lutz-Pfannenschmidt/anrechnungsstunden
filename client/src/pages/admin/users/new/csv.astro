---
import DefaultLayout from "../../../../layouts/DefaultLayout.astro";
---

<DefaultLayout title="Benutzerverwaltung">
    <h1 class="text-4xl font-bold text-center">
        Benutzerverwaltung | CSV Import
    </h1>

    <div class="flex flex-col justify-center items-center">
        <form id="create-frm" class="flex flex-col gap-4">
            <p class="text-alert text-center w-md">
                Importieren sie Lehrpersonen aus einer CSV-Datei. Die Datei muss
                die Spalten <code class="text-primary">Name</code> und <code
                    class="text-primary">E-Mail</code
                > enthalten und durch Kommas getrennt sein. Eine E-Mail Addresse
                muss in dem Format
                <code class="text-primary">AAA@B.CC</code> sein, wobei alle Teile
                auch länger sein können.
            </p>

            <fieldset class="fieldset">
                <legend class="fieldset-legend">CSV Datei</legend>
                <input
                    type="file"
                    id="csv"
                    class="file-input file-input-xl w-lg validator"
                    accept="text/csv"
                    required
                />
            </fieldset>

            <button class="btn btn-alert w-full" disabled type="submit"
                >CSV importieren</button
            >
        </form>
    </div>
</DefaultLayout>

<script>
    import { pb } from "@src/pocketbase";
    import { Collections } from "@src/pocketbase-types";
    import { toast } from "@src/toast";
    import Swal from "sweetalert2";

    const createFrm = document.getElementById("create-frm") as HTMLFormElement;
    const submitBtn = createFrm.querySelector("button") as HTMLButtonElement;

    const csvInpt = createFrm.querySelector("#csv") as HTMLInputElement;

    function validateEmail(email: string): boolean {
        const emailRegex = /^[^\s@]{3,}@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    function submit(e: SubmitEvent) {
        e.preventDefault();

        if (!csvInpt.files) {
            toast("error", "Keine Datei ausgewählt.");
            return;
        }

        const csv = csvInpt.files[0];
        if (!csv) {
            toast("error", "Keine Datei ausgewählt.");
            return;
        }

        const reader = new FileReader();
        reader.onload = async function (e) {
            if (!e.target) {
                toast("error", "Fehler beim Lesen der Datei.");
                return;
            }
            const text = e.target.result as string;
            const lines = text.trim().split("\n");

            Swal.fire({
                title: "Lehrpersonen werden erstellt...",
                icon: "info",
                showConfirmButton: false,
            });

            const batch = pb.createBatch();
            for (const line of lines) {
                if (line.trim().length === 0 || !line) {
                    continue;
                }
                const parts = line.split(",");

                if (parts.length < 2) {
                    toast(
                        "error",
                        `Zeile hat nicht genügend von Kommas getrennte Werte.\nErwartet: "Name, E-Mail"\nTatsächlich: "${line}"`
                    );
                    return;
                } else if (parts.length > 2) {
                    toast(
                        "error",
                        `Zeile hat zu viele von Kommas getrennte Werte.\nErwartet: "Name, E-Mail"\nTatsächlich: "${line}"`
                    );
                    return;
                }

                const uname = parts[0].trim();
                const email = parts[1].trim();
                const short = email.split("@")[0];

                if (!validateEmail(email) || !short || short.length < 3) {
                    toast(
                        "error",
                        `Zeile hat keine valide email addrese: "${email}".`
                    );
                }

                batch.collection(Collections.Users).create({
                    short: short,
                    email: email,
                    name: uname,
                });
            }

            if (!lines || lines.length === 0) {
                toast("error", "Keine Lehrpersonen zum Importieren gefunden.");
                return;
            }

            try {
                await batch.send();
                toast("success", "Lehrpersonen erfolgreich importiert.");
                setTimeout(() => {
                    window.location.href = "/admin/users/";
                }, 1000);
            } catch {
                toast(
                    "error",
                    "Fehler beim Importieren der Lehrpersonen. Wahrscheinlich existieren einige Lehrpersonen bereits (E-Mail oder Kürzel bereits vergeben)."
                );
            }
        };

        reader.readAsText(csv);
    }

    createFrm.onsubmit = submit;

    csvInpt.onchange = function () {
        submitBtn.disabled = !csvInpt.files || csvInpt.files.length === 0;
        submitBtn.classList.toggle("btn-alert", submitBtn.disabled);
        submitBtn.classList.toggle("btn-success", !submitBtn.disabled);
    };
</script>
